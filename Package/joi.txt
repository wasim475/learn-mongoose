Joi ржХрзА ржПржмржВ ржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ?
Joi рж╣рж▓ ржПржХржЯрж┐ data validation рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐, ржпрж╛ Node.js-ржП ржлрж░рзНржо ржмрж╛ API-рждрзЗ ржкрж╛ржарж╛ржирзЛ ржбрж╛ржЯрж╛ ржнрзНржпрж╛рж▓рж┐ржбрзЗржЯ ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯред ржПржЯрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЗ ржпрзЗ ржЗржиржкрзБржЯ ржбрж╛ржЯрж╛ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ ржПржмржВ ржЕржирж╛ржХрж╛ржЩрзНржХрзНрж╖рж┐ржд ржбрж╛ржЯрж╛ (ржпрзЗржоржи ржнрзБрж▓ ржЯрж╛ржЗржк, ржЦрж╛рж▓рж┐ ржлрж┐рж▓рзНржб, ржЫрзЛржЯ/ржмрзЬ рж╕рзНржЯрзНрж░рж┐ржВ ржЗрждрзНржпрж╛ржжрж┐) ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рзЗред

Joi ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛:

npm install joi
Joi ржПрж░ ржмрзНржпржмрж╣рж╛рж░ (ржЙржжрж╛рж╣рж░ржгрж╕рж╣)
рзз. рж╕рж╛ржзрж╛рж░ржг ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи
const Joi = require('joi');

// рж╕рзНржХрж┐ржорж╛ рждрзИрж░рж┐ (Validation Rules)
const schema = Joi.object({
    name: Joi.string().min(3).max(30).required(),
    age: Joi.number().integer().min(18).max(60).required(),
    email: Joi.string().email().required(),
});

// ржЗржиржкрзБржЯ ржбрж╛ржЯрж╛
const userInput = {
    name: "Wasim",
    age: 28,
    email: "wasim@example.com"
};

// ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи ржХрж░рж╛
const { error, value } = schema.validate(userInput);

if (error) {
    console.log("Validation Error:", error.details[0].message);
} else {
    console.log("Validated Data:", value);
}
ЁЯСЙ ржпржжрж┐ ржЗржиржкрзБржЯ ржбрж╛ржЯрж╛ рж╕ржарж┐ржХ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ Validated Data ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗред
ЁЯСЙ ржпржжрж┐ ржнрзБрж▓ ржЗржиржкрзБржЯ ржжрж╛ржУ (ржпрзЗржоржи name рзй ржЕржХрзНрж╖рж░рзЗрж░ ржХржо ржмрж╛ age рззрзо ржмржЫрж░рзЗрж░ ржХржо), рждрж╛рж╣рж▓рзЗ Validation Error ржжрзЗржЦрж╛ржмрзЗред

рзи. Express.js-ржПрж░ рж╕рж╛ржерзЗ Joi ржмрзНржпржмрж╣рж╛рж░

const express = require('express');
const Joi = require('joi');

const app = express();
app.use(express.json());

// Joi Schema
const userSchema = Joi.object({
    username: Joi.string().min(3).max(20).required(),
    password: Joi.string().min(6).required(),
    email: Joi.string().email().required()
});

// API Route
app.post('/register', (req, res) => {
    const { error } = userSchema.validate(req.body);
    
    if (error) {
        return res.status(400).json({ message: error.details[0].message });
    }

    res.json({ message: "User registered successfully!" });
});

// рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рж╛
app.listen(3000, () => console.log("Server running on port 3000"));
ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?
/register рж░рзБржЯрзЗ username, password, email ржкрж╛ржарж╛рж▓рзЗ Joi рж╕рзЗржЯрж╛ ржЪрзЗржХ ржХрж░ржмрзЗред
ржнрзБрж▓ ржЗржиржкрзБржЯ рж╣рж▓рзЗ 400 Bad Request рж░рзЗрж╕ржкржирзНрж╕ ржжрзЗржмрзЗред
рж╕ржарж┐ржХ рж╣рж▓рзЗ "User registered successfully!" ржжрзЗржЦрж╛ржмрзЗред
рзй. ржХрж╛рж╕рзНржЯржо ржорзЗрж╕рзЗржЬ рж╕рзЗржЯ ржХрж░рж╛

const schema = Joi.object({
    username: Joi.string().min(3).max(20).required()
        .messages({
            "string.empty": "Username is required!",
            "string.min": "Username must be at least 3 characters!",
            "string.max": "Username cannot exceed 20 characters!"
        }),
});

const { error } = schema.validate({ username: "" });

if (error) {
    console.log(error.details[0].message);
}
ЁЯСЙ ржПржЦрж╛ржирзЗ Joi.messages() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржХрж╛рж╕рзНржЯржо ржПрж░рж░ ржорзЗрж╕рзЗржЬ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред

Joi ржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ?
тЬЕ User Input Validation: ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржжрзЗржУрзЯрж╛ ржЗржиржкрзБржЯ рж╕ржарж┐ржХ ржХрж┐ржирж╛ рждрж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ред
тЬЕ Error Handling: ржнрзБрж▓ ржЗржиржкрзБржЯ рж╣рж▓рзЗ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ред
тЬЕ Schema-Based Validation: рж╕рж╣ржЬрзЗ Rules (Schema) рж╕рзЗржЯ ржХрж░рзЗ ржЗржиржкрзБржЯ ржЪрзЗржХ ржХрж░рж╛ред
тЬЕ Security: SQL Injection, XSS-ржПрж░ ржорждрзЛ ржЖржХрзНрж░ржоржг ржерзЗржХрзЗ рж░ржХрзНрж╖рж╛ ржкрзЗрждрзЗ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд ржЗржиржкрзБржЯ ржмрзНрж▓ржХ ржХрж░рж╛ред
тЬЕ Better Code Management: ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ if-else ржЪрзЗржХрж┐ржВ ржХрж░рж╛рж░ ржжрж░ржХрж╛рж░ ржирзЗржЗ, Joi ржжрж┐рзЯрзЗ рж╕рж╣ржЬрзЗржЗ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи ржХрж░рж╛ ржпрж╛рзЯред