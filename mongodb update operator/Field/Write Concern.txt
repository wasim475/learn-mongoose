Write Concern কী?
MongoDB-তে Write Concern নির্ধারণ করে যে, ডেটা লিখতে (Insert/Update/Delete) হলে কতগুলো নোডে সেই পরিবর্তন সফল হতে হবে।

w: "majority" মানে হলো, ডেটা লিখতে হলে ক্লাস্টারের অধিকাংশ (মেজরিটি) নোডে সফলভাবে লিখতে হবে।
এটি ডেটা কনসিসটেন্সি ও নিরাপত্তা নিশ্চিত করতে ব্যবহৃত হয়, যাতে শুধু প্রাইমারি নয়, রিপ্লিকা সেটের মেজরিটি নোডেও ডেটা সেভ হয়।
এর ফলে সিস্টেম ক্র্যাশ, নেটওয়ার্ক সমস্যা বা অন্য কোনো কারণে ডেটা লস কম হয়।
উদাহরণ ১: অর্ডারের স্ট্যাটাস আপডেট করা (E-commerce App)
তোমার একটি ই-কমার্স অ্যাপ আছে যেখানে প্রতিটি অর্ডারের স্ট্যাটাস আপডেট করা হয়। চাইলে শুধু প্রাইমারিতে আপডেট না করে, মেজরিটি নোডেও নিশ্চিত করতে পারো।


db.orders.updateOne(
  { orderId: "ABC123" },
  { $set: { status: "Shipped" } },
  { writeConcern: { w: "majority" } }
);
✅ কি হবে?

orderId: "ABC123" থাকলে status "Shipped" হয়ে যাবে।
আপডেট কেবল তখনই সফল হবে, যখন এটি অধিকাংশ নোডে পৌঁছাবে।
নোড ফেইল করলে? যদি কোনো নোড ডাউন থাকে, তবুও যতক্ষণ না মেজরিটি নোডে আপডেট হয়, ততক্ষণ এটি সফল হবে না।
উদাহরণ ২: ব্যাঙ্ক ট্রান্সফার সিস্টেমে টাকা কাটা (Critical Transaction)
একটি ব্যাংকিং অ্যাপে কোনো ইউজারের টাকা কাটার সময় নিশ্চিত করতে চাই যে, তা শুধু প্রাইমারি ডাটাবেজে লিখলে হবে না, মেজরিটি নোডে পৌঁছাতে হবে।


db.accounts.updateOne(
  { accountNumber: "123456789" },
  { $inc: { balance: -500 } },
  { writeConcern: { w: "majority" } }
);
✅ কি হবে?

ইউজারের ব্যালেন্স থেকে ৫০০ টাকা কমানো হবে।
যদি ৩টি নোডের মধ্যে অন্তত ২টিতে সফলভাবে লেখা না হয়, তাহলে ট্রান্সাকশন সফল হবে না।
এই সেটিংস ডাটা লস এড়াতে সহায়ক।
উদাহরণ ৩: ব্লগ পোস্ট পাবলিশ করা (Content Management System - CMS)
একটি ব্লগ সাইটে নতুন পোস্ট পাবলিশ করার সময় নিশ্চিত করতে চাই যে, সেটা শুধু এক জায়গায় সংরক্ষণ হলে হবে না, মেজরিটি নোডে রেপ্লিকেট হবে।


db.posts.insertOne(
  { title: "MongoDB Write Concern", content: "Importance of majority write concern" },
  { writeConcern: { w: "majority" } }
);
✅ কি হবে?

নতুন পোস্ট প্রকাশিত হবে, তবে নিশ্চিত করা হবে যে এটি অধিকাংশ নোডে সেভ হয়েছে।
কেন? যেন সার্ভার ডাউন হলেও ডেটা লস না হয়।
কেন w: "majority" গুরুত্বপূর্ণ?
✔ ডেটা নিরাপত্তা: যদি কোনো এক বা একাধিক নোড ডাউন হয়ে যায়, তাহলে ডেটা লস হবে না।
✔ ডিস্ট্রিবিউটেড সিস্টেমে নির্ভরযোগ্যতা: প্রাইমারি নোডের সাথে সাথে রিপ্লিকা সেটেও নিশ্চিত হয়।
✔ ব্যাংকিং, পেমেন্ট, ই-কমার্স, ব্লগ, লগ স্টোরেজের মতো গুরুত্বপূর্ণ ক্ষেত্রে প্রয়োজনীয়।